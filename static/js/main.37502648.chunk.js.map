{"version":3,"sources":["components/Album.js","App.js","serviceWorker.js","index.js"],"names":["Album","props","state","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pic","react_default","a","createElement","key","id","className","title","href","url","target","src","thumbnailUrl","alt","_this","_this$props","pictures","picsQuantity","sort","b","length","slice","map","renderSinglePic","Component","ALBUMS_QUANTITY","API_URL","App","setLastAlbumsFromData","data","albumQuantity","albumIndexes","forEach","album","albumId","values","lastAlbums","groupedAlbums","groupBy","albums","setState","Axios","get","then","albumsContainers","keyItem","src_components_Album","renderAlbums","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAoDeA,2BAxCX,SAAAA,EAAYC,EAAOC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAAG,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KACjBJ,EAAOC,iFAQDO,GACZ,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAIK,GAAIC,UAAU,iBAChCL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACVN,EAAIO,OAETN,EAAAC,EAAAC,cAAA,KAAGK,KAAMR,EAAIS,IAAKF,MAAOP,EAAIO,MAAOD,UAAU,sBAAsBI,OAAO,UACvET,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAIY,aAAcC,IAAKb,EAAIO,2CASxC,IAAAO,EAAAlB,KAAAmB,EAC0BnB,KAAKJ,MAA/BwB,EADAD,EACAC,SAAUC,EADVF,EACUE,aAOf,OANAD,EAASE,KAAK,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAEG,GAAKc,EAAEd,GAAK,GAAK,IAEtCY,IACDA,EAAeD,EAASI,QAIxBnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACVU,EAASK,MAAM,EAAGJ,GAAcK,IAAI,SAACtB,GAAD,OAASc,EAAKS,gBAAgBvB,aAxC/DwB,cCCdC,EAAkB,EAIlBC,EAAU,8CAyEDC,cA7Db,SAAAA,EAAYnC,EAAOC,GAAO,IAAAqB,EAAA,OAAApB,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IACxBb,EAAApB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAMJ,EAAOC,KAgBfmC,sBAAwB,SAACC,EAAMC,GAE7B,IAAIC,EAAe,GACnBF,EAAKG,QAAQ,SAACC,GAAD,OAAWF,EAAaE,EAAMC,SAAWD,EAAMC,WAE5DH,EAAerC,OAAOyC,OAAOJ,IAChBb,KAAK,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAIiB,EAAI,GAAK,IAEzC,IAAMiB,EAAaL,EAAaV,MAAM,EAAGS,GACnCO,EAAgBC,kBAAQT,EAAM,WAC9BU,EAASH,EAAWd,IAAI,SAACY,GAAD,OAAaG,EAAcH,KAEzDpB,EAAK0B,SAAS,CAACD,YA1BfzB,EAAKrB,MAAQ,CACX8C,OAAQ,IAGVE,IAAMC,IAAIhB,GAASiB,KAAK,SAACd,GACvBf,EAAKc,sBAAsBC,EAAKA,KAAMJ,KARhBX,8EAoCX,IAET8B,EADehD,KAAKH,MAAhB8C,OACsBjB,IAAI,SAACN,EAAU6B,GAC3C,OAAQ5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAO1C,IAAKyC,EAAS7B,SAAUA,EAAUC,aArDjC,MAwDlB,OAAQhB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qBACpBsC,oCAUH,OACI3C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACZV,KAAKmD,uBA9DEvB,aCJEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.37502648.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Album.css';\n\n/**\n * Album component\n */\nclass Album extends Component {\n    /**\n     * Main constructor\n     * @param props\n     * @param state\n     */\n    constructor(props, state) {\n        super(props, state);\n    }\n\n    /**\n     * render a single picture from the album\n     * @param pic\n     * @returns {*}\n     */\n    renderSinglePic(pic) {\n        return (<div key={pic.id} className=\"Album-Picture\">\n            <div className=\"Album-Picture-Title\">\n                {pic.title}\n            </div>\n            <a href={pic.url} title={pic.title} className=\"Album-Picture-Image\" target=\"_blank\">\n                <img src={pic.thumbnailUrl} alt={pic.title}/>\n            </a>\n        </div>);\n    }\n\n    /**\n     * Render album container with their pictures\n     * @returns {*}\n     */\n    render() {\n        let {pictures, picsQuantity} = this.props;\n        pictures.sort((a, b) => a.id < b.id ? 1 : -1 );\n\n        if (!picsQuantity) {\n            picsQuantity = pictures.length;\n        }\n\n        return (\n            <div className=\"Album-Container\">\n                {pictures.slice(0, picsQuantity).map((pic) => this.renderSinglePic(pic))}\n            </div>\n        );\n    }\n}\n\nexport default Album;","import React, {Component} from 'react';\nimport Axios from 'axios';\nimport { groupBy } from 'lodash';\nimport './App.css';\nimport Album from './components/Album';\n\n/** Constant to limit the quantity of items */\nconst ALBUMS_QUANTITY = 3;\n/** LIMIT THE PICS QUANTITY **/\nconst PICS_QUANTITY = 2;\n/** API URL **/\nconst API_URL = 'https://jsonplaceholder.typicode.com/photos';\n\n/**\n * Main App\n */\nclass App extends Component {\n\n  /**\n   * Base constructor\n   * @param props\n   * @param state\n   */\n  constructor(props, state) {\n    super(props, state);\n\n    this.state = {\n      albums: [],\n    };\n\n    Axios.get(API_URL).then((data) => {\n      this.setLastAlbumsFromData(data.data, ALBUMS_QUANTITY);\n    });\n  }\n\n  /**\n   * Set last X pictures from data response\n   * @param data\n   * @param albumQuantity\n   */\n  setLastAlbumsFromData = (data, albumQuantity) => {\n\n    let albumIndexes = {};\n    data.forEach((album) => albumIndexes[album.albumId] = album.albumId);\n\n    albumIndexes = Object.values(albumIndexes);\n    albumIndexes.sort((a, b) => a < b ? 1 : -1);\n\n    const lastAlbums = albumIndexes.slice(0, albumQuantity);\n    const groupedAlbums = groupBy(data, 'albumId');\n    const albums = lastAlbums.map((albumId) => groupedAlbums[albumId]);\n\n    this.setState({albums});\n  };\n\n  /**\n   * Helper function to render the album\n   * @returns {*}\n   */\n  renderAlbums() {\n    const { albums } = this.state;\n    let albumsContainers = albums.map((pictures, keyItem) => {\n      return (<Album key={keyItem} pictures={pictures} picsQuantity={PICS_QUANTITY}/>);\n    });\n\n    return (<div className=\"App-Album-Wrapper\">\n      {albumsContainers}\n    </div>);\n\n  };\n\n  /**\n   * Render the main app\n   * @returns {*}\n   */\n  render() {\n    return (\n        <div className=\"App\">\n          {this.renderAlbums()}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}